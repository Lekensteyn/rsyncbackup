#!/bin/bash
set -e

print_usage() {
	cat <<USAGE
Usage: $0 command [args] [source..] [-- [rsync options]]

Commands:
  sources       Print all possible backup sources.
  printcmd      Print commands that would be executed.
  testrsync     Dry-run rsync (without destination mount).
  mount         Mount the storage and exit (needs root). Args:
                -u      Unlock only, do not mount filesystem.
  umount        Unmount storage and exit (needs root).
                -y      Do not print commands, but execute them.
  dobackup      Mount and backup.

Note: if no source is given, everything will be included.
XXX: sort by source.

USAGE
	exit 1
}


##################################################
### Config
##################################################

luks_UUID=af5f80db-187d-4319-bf19-bb7fd9351a11
LUKSNAME=ALBackup
MOUNTPOINT=/mnt

# $excluderulesdir/$dst_name is used for rsync excludes
excluderulesdir="/home/peter/rsync-excl.d"

# src_mountpoint/$subdir/ -> $backupdir/$backupname/src_mountpoint/
# blkdev is ignored anyway!
sources='
#blkdev	dst_name	src_mountpoint	subdir
sda3l	Root		/				/
sda3lh	Home		/				/home/
sda2	Boot		/boot			/
'
# mountpoints must NOT end with /, this will be appended automatically


sources_contain() {
	local name=$1

	while read blkdev dst_name src_mountpoint; do
		if [ -z "$blkdev" ] || [[ $blkdev == \#* ]]; then
			continue
		fi
		[[ $dst_name != $name ]] || return 0
	done <<<"$sources"

	return 1
}

##################################################
### Argument parsing
##################################################

ECHO=
ECHO_RSYNC=
SUDO=
RSYNC_DRY_RUN=-n
MOUNT_ONLY=false
UNLOCK_ONLY=false
limit_sources=
confirmed=false

cmd=$1; shift || :

# Prepend rsync options if any
while [ $# -gt 0 ]; do
	arg=$1; shift
	case $arg in
	-y)
		if [[ $cmd == umount ]]; then
			confirmed=true; continue
		fi
		;;
	-u)
		if [[ $cmd == mount ]]; then
			UNLOCK_ONLY=true; continue
		fi
		;;
	--) break ;;
	esac

	# Before --, arguments are sources
	limit_sources+="${limit_sources:+ }$arg"

	if ! sources_contain $arg; then
		echo "Unknown source: $arg"
		exit 1
	fi
done

case $cmd in
sources)
	echo "$sources" | awk -v limit_sources="$limit_sources" '
	BEGIN { split(limit_sources, a); }
	{ found = 1; }
	/^[^#]/ {
		name = $2; found = 0;
		if (length(a) == 0) found = 1;
		for (i in a) if (a[i] == name) found = 1;
	}
	found { print }'
	exit
	;;
printcmd)
	ECHO=echo
	ECHO_RSYNC=echo
	SUDO=echo
	;;
testrsync)
	ECHO=echo
	SUDO=echo
	;;
mount)
	MOUNT_ONLY=true
	;;
umount)
	$confirmed || SUDO=echo
	;;
dobackup)
	RSYNC_DRY_RUN=
	;;
*)
	echo "Unknown command"
	print_usage
	;;
esac


##################################################
### rsync options
##################################################
# -a --archive
# -v --verbose
# -A --acls
# -X --xattrs
# -x --one-file-system
# -n --dry-run
# --numeric-ids
# -y --fuzzy # more efficient for basing changes on local directory

rsync_opts=($RSYNC_DRY_RUN)

rsync_opts+=(-avAXx)

rsync_opts+=(--delete)
#rsync_opts+=(--fuzzy)

# Use per-target exclusion rules
#rsync_opts+=(--exclude-from=/home/pc/rsync-excl)

rsync_opts+=("$@")

##################################################
### Stuff for mounting storage...
##################################################

dev="$(readlink -e /dev/disk/by-uuid/$luks_UUID)" || :
if [ -z "$dev" ]; then
	echo "LUKS Partition $luks_UUID is not found"
	exit 1
fi

blockdev="${dev##*/}"
blockdev="${blockdev%%[0-9]*}"

if [[ $cmd == umount ]]; then
	if mountpoint -q "$MOUNTPOINT"; then
		$SUDO umount $MOUNTPOINT
	fi
	$SUDO cryptsetup luksClose $LUKSNAME
	#$SUDO tee /sys/block/$blockdev/device/delete <<<1
	exit
fi

mapdev=/dev/mapper/$LUKSNAME
if [ ! -e "$mapdev" ]; then
	echo "Mounting crypt device $dev on $LUKSNAME..."
	if ! $SUDO cryptsetup luksOpen --allow-discards -T 12 "$dev" "$LUKSNAME"; then
		echo "Cannot mount encrypted volume"
		exit 1
	fi
fi

! $UNLOCK_ONLY || exit

mp=$(awk -v MP="$MOUNTPOINT" '{if($2 == MP){print $1}}' < /proc/mounts)
if [ -n "$mp" ] && [[ "$(readlink -e "$mp")" != $(readlink -e "$mapdev") ]]
then
	echo "$mp is already mounted on $MOUNTPOINT"
	exit 1
fi

if [ -z "$mp" ]; then
	echo "Mounting $mapdev on $MOUNTPOINT..."
	if ! $SUDO mount -o defaults,discard "$mapdev" "$MOUNTPOINT"; then
		echo "Could not mount $mapdev"
		exit 1
	fi
fi

! $MOUNT_ONLY || exit

##################################################
### End storage mount.
##################################################

_mkdir() {
	$ECHO mkdir "$@"
}
_ln() {
	$ECHO ln "$@"
}
_rm() {
	$ECHO rm "$@"
}
_rsync() {
	[ -n "$ECHO_RSYNC" ] || echo rsync "$@"
	$ECHO_RSYNC /usr/bin/rsync "$@"
}

# Parameters for backup, previous dir name can be empty if it does not exist
destdirname=backup-$(date +%Y%m%d)
prevdirname=$(readlink "$MOUNTPOINT/latest") || :

if [[ $prevdirname == $destdirname ]]; then
	# Todays backup is being updated, use older backup for reference
	prevdirname=$(readlink "$MOUNTPOINT/prev") || :
fi

echo "Begin backup process..."

_mkdir -m755 -p -v "$MOUNTPOINT/$destdirname"

# Whether the backup created some directories
did_anything_happen=false

# Link to last known backup - fragile because the previous backup might be
# deleted already!
link_to_prev() {
	local name=$1 absdest="$2"
	local prev="../$prevdirname/$name"
	if [ -e "$absdest" ]; then
		echo "$name: skipping link creation, target already exist"
	elif [ ! -e "$MOUNTPOINT/$prevdirname/$name" ]; then
		echo "$name: previous does not exist, skipping link creation"
	else
		# today/foo -> today/../yday/foo -> yday/foo
		_ln -snfv "$prev" "$absdest"
		# XXX: make a mode which deletes older backups and corrects
		# symlinks
	fi
}

while read blkdev dst_name src_mountpoint subdir; do
	if [ -z "$blkdev" ] || [[ $blkdev == \#* ]]; then
		continue
	fi

	absdestdir="$MOUNTPOINT/$destdirname/$dst_name"
	absprevdir="${prevdirname:+$MOUNTPOINT/$prevdirname/$dst_name}"

	if [ -n "$limit_sources" ]; then
		found=false
		for src in $limit_sources; do
			[[ $src != $dst_name ]] || found=true
		done

		if ! $found; then
			link_to_prev "$dst_name" "$absdestdir"
			continue
		fi
	fi

	if ! mountpoint -q "$src_mountpoint"; then
		echo "$src_mountpoint: not a mountpoint - skipping"
		link_to_prev "$dst_name" "$absdestdir"
		continue
	fi

	# Remove dummy symlink to older backup, fill with new data
	if [ -L "$absdestdir" ]; then
		absprevdir="$(readlink -e "$absdestdir")"
		_rm -v "$absdestdir"
	fi

	# if previous backup exist, base on that
	local_opts=()
	if [ -e "$excluderulesdir/$dst_name" ]; then
		local_opts+=(--exclude-from="$excluderulesdir/$dst_name")
	fi
	if [ -d "$absprevdir" ]; then
		local_opts+=(--link-dest "$absprevdir/")
	fi

	# chdir because of xattr dry-run bug https://bugzilla.samba.org/show_bug.cgi?id=10238
	(cd "$src_mountpoint" &&
	_rsync "${rsync_opts[@]}" \
		"${local_opts[@]}" \
		"$src_mountpoint/$subdir/" "$absdestdir/")

	if [ -d "$absdestdir" ] || [[ $RSYNC_DRY_RUN == -n ]]; then
		did_anything_happen=true
	fi
done <<<"$sources"

# Only update links if there were actually changes
if $did_anything_happen; then
	if [ -n "$prevdirname" ]; then
		_ln -snvf "$prevdirname" "$MOUNTPOINT/prev"
	fi
	_ln -snvf "$destdirname" "$MOUNTPOINT/latest"
elif [ -d "$MOUNTPOINT/$destdirname" ]; then
	# nothing changes, discard empty backup
	for symlink in "$MOUNTPOINT/$destdirname/"*; do
		[ ! -L "$symlink" ] || rm -v "$symlink"
	done
	rmdir -v "$MOUNTPOINT/$destdirname"
fi

echo "# sudo umount $MOUNTPOINT && sudo cryptsetup luksClose $LUKSNAME && sudo tee /sys/block/$blockdev/device/delete <<<1"
